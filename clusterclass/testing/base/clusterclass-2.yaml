apiVersion: cluster.x-k8s.io/v1alpha4
kind: ClusterClass
metadata:
  name: my-cluster-class
  namespace: default
spec:
  controlPlane:
    metadata:
      labels:
        classLabel: classLabelValue
        topologyLabel: shouldBeOverwritten
      annotations:
        classAnnotation: classAnnotation
        topologyAnnotation: shouldBeOverwritten
    ref:
      apiVersion: controlplane.cluster.x-k8s.io/v1alpha4
      kind: KubeadmControlPlaneTemplate
      name: my-cluster-control-plane
      namespace: default
    machineInfrastructure:
      ref:
        kind: DockerMachineTemplate
        apiVersion: infrastructure.cluster.x-k8s.io/v1alpha4
        name: "my-cluster-control-plane"
        namespace: default
  infrastructure:
    ref:
      apiVersion: infrastructure.cluster.x-k8s.io/v1alpha4
      kind: DockerClusterTemplate
      name: my-cluster
      namespace: default
  workers:
    machineDeployments:
    - class: default-worker
      template:
        metadata:
          labels:
            classLabel: classLabelValue
            topologyLabel: shouldBeOverwritten
          annotations:
            classAnnotation: classAnnotation
            topologyAnnotation: shouldBeOverwritten
        bootstrap:
          ref:
            kind: KubeadmConfigTemplate
            apiVersion: bootstrap.cluster.x-k8s.io/v1alpha4
            name: "my-cluster-md-0"
        infrastructure:
          ref:
            kind: DockerMachineTemplate
            apiVersion: infrastructure.cluster.x-k8s.io/v1alpha4
            name: "my-cluster-md-0"
---
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha4
kind: DockerClusterTemplate
metadata:
  name: my-cluster
  namespace: default
---
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha4
kind: DockerMachineTemplate
metadata:
  name: "my-cluster-control-plane"
  namespace: default
spec:
  template:
    spec:
      extraMounts:
      - containerPath: "/var/run/docker.sock"
        hostPath: "/var/run/docker.sock"
---
kind: KubeadmControlPlaneTemplate
apiVersion: controlplane.cluster.x-k8s.io/v1alpha4
metadata:
  name: "my-cluster-control-plane"
  namespace: default
spec:
  template:
    spec:
      replicas: 1
      machineTemplate:
        infrastructureRef:
          kind: DockerMachineTemplate
          apiVersion: infrastructure.cluster.x-k8s.io/v1alpha4
          name: "my-cluster-control-plane"
          namespace: default
      kubeadmConfigSpec:
        clusterConfiguration:
          controllerManager:
            extraArgs: { enable-hostpath-provisioner: 'true' }
          apiServer:
            certSANs: [ localhost, 127.0.0.1 ]
        initConfiguration:
          nodeRegistration:
            criSocket: /var/run/containerd/containerd.sock
            kubeletExtraArgs:
              # We have to pin the cgroupDriver to cgroupfs as kubeadm >=1.21 defaults to systemd
              # kind will implement systemd support in: https://github.com/kubernetes-sigs/kind/issues/1726
              cgroup-driver: cgroupfs
              eviction-hard: 'nodefs.available<0%,nodefs.inodesFree<0%,imagefs.available<0%'
        joinConfiguration:
          nodeRegistration:
            criSocket: /var/run/containerd/containerd.sock
            kubeletExtraArgs:
              # We have to pin the cgroupDriver to cgroupfs as kubeadm >=1.21 defaults to systemd
              # kind will implement systemd support in: https://github.com/kubernetes-sigs/kind/issues/1726
              cgroup-driver: cgroupfs
              eviction-hard: 'nodefs.available<0%,nodefs.inodesFree<0%,imagefs.available<0%'
      version: v1.22.0
---
apiVersion: infrastructure.cluster.x-k8s.io/v1alpha4
kind: DockerMachineTemplate
metadata:
  name: "my-cluster-md-0"
  namespace: default
spec:
  template:
    spec: { }
---
apiVersion: bootstrap.cluster.x-k8s.io/v1alpha4
kind: KubeadmConfigTemplate
metadata:
  name: "my-cluster-md-0"
  namespace: default
spec:
  template:
    spec:
      joinConfiguration:
        nodeRegistration:
          kubeletExtraArgs:
            # We have to pin the cgroupDriver to cgroupfs as kubeadm >=1.21 defaults to systemd
            # kind will implement systemd support in: https://github.com/kubernetes-sigs/kind/issues/1726
            cgroup-driver: cgroupfs
            eviction-hard: 'nodefs.available<0%,nodefs.inodesFree<0%,imagefs.available<0%'

